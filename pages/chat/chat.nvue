<template>
	<div class="page">
		<!-- 导航栏 -->
		<wx-nav-bar showBack title="聊天对象名" fixed></wx-nav-bar>
		
		<!-- 聊天内容区域 -->
		<scroll-view scroll-y :scroll-into-view="scrollIntoId"
					 @scrolltolower="scrollIntoIdRemove"
					 class="bg-light position-fixed left-0 right-0 px-3"
					 :style="chatBodyBottom">
			<!-- 聊天消息列表组件 -->
			<block v-for="(item, index) in lists" :key="index">
				<wx-chat-item :id="item.chatItemId" :item="item" :index="index" :pretime="index > 0 ? lists[index-1].created_time : 0"  @onLongpress="onLongpress"></wx-chat-item>
			</block>

		</scroll-view>
		
		<!-- 内容蒙版 -->
		<div v-if="(mode === 'action' || mode === 'emoticon')" class="position-fixed top-0 left-0 right-0" :style="maskBottom"  @click="clickContent"></div>
		
		<!-- 底部输入框 -->
		<view class="position-fixed left-0 right-0 border-top flex align-center"
			  style="background-color: #F7F7F7;" :style="'bottom:'+keyboardHeight+'px'">
			  <view class="my-1 flex-1 flex-row align-center">
				<wx-icon-button class="mx-1" :icon="'\ue606'" size="50"></wx-icon-button>
				<view class="flex-1">
					<textarea v-model="text"
							  adjust-position="false"
							  fixed class="bg-white rounded p-2 font-normal"
							  style="height: 80rpx;"
							  @focus="onInputFocus"
							  @blur="onInputBlur"></textarea>
				</view>
				<!-- 拓展菜单 -->
				<template v-if="text.length === 0">
					<!-- 表情 -->
					<wx-icon-button class="mx-1" :icon="'\ue605'" size="50" @click="openEmoticonOrActions('emoticon')"></wx-icon-button>
					<!-- 拓展菜单 -->
					<wx-icon-button class="mr-1" :icon="'\ue603'" size="50" @click="openEmoticonOrActions('action')"></wx-icon-button>
				</template>
				<template v-else>
					<!-- 发送按钮 -->
					<view class="main-bg-color rounded mx-2 px-2 py-1" @click="sendMessage('text')">
						<text class="text-white font-samll">发送</text>
					</view>
				</template>
			  </view>
		</view>
		<!-- 拓展菜单 -->
		<wx-popup ref="actions" fixedBottom :mask="false" transformOrigin="center bottom"
				  class="border-top border-light-secondary bg-light">
			<view style="height: 580rpx;" class="bg-light">
				<swiper :indicator-dots="true" :duration="1000" style="height: 510rpx;">
					<swiper-item class="row" v-for="(items, index) in emoticonOrActionList" :key="index">
						<view class="col-3 flex flex-column align-center justify-center"
							  style="height: 250rpx;"
							  v-for="(item, idx) in items"  :key="idx"
							  @click="actionEvent(item)">
							<image :src="item.icon" mode="widthFix" style="width: 100rpx;height: 100rpx;"></image>
							<text class="font-samll text-light-muted my-2">{{item.name}}</text>
						</view>
					</swiper-item>
				</swiper>
			</view>
		</wx-popup>
		
		<!-- 弹出层 -->
		<wx-popup class="border" ref="extend" :fixedBottom="false" :contentWidth="240" :contentHeight="100 * menus.length" :tabbarHeight="110">
			<view v-for="(menuItem,index) in menuLists" :key="index" class="flex flex-column" style="width: 240rpx; height: 100rpx;"
			 @click="clickHandle(menuItem)">
				<view class="flex-1 flex align-center">
					<text class="font-normal pl-3">{{menuItem.title}}</text>
				</view>
			</view>
		</wx-popup>
		
	</div>
</template>

<script>
	import wxNavBar from '@/components/general-ui/wx-nav-bar.nvue'
	import wxIconButton from '@/components/general-ui/wx-icon-button.vue'
	import wxChatItem from '@/components/general-ui/wx-chat-item.vue'
	import wxPopup from '@/components/general-ui/wx-popup.nvue'
	import wxTimeUtil from '@/common/util/wx-time.js'
	export default {
		components: {
			wxNavBar,
			wxChatItem,
			wxIconButton,
			wxPopup,
		},
		data() {
			return {
				isPopupSelf: false,
				isNewChatItem: false,
				bottomBarH: 0,
				keyboardHeight: 0,
				textKeyboardHeight: 0,
				scrollIntoId: "",
				// 模式
				mode: "text", 
				text: "",
				// 消息长按弹窗菜单
				menus: [{
						"chatItemId": "-1",
						"title": "复制",
						"event": "copy",
					},
					{
						"chatItemId": "-1",
						"title": "发送给朋友",
						"event": "",
					},
					{
						"chatItemId": "-1",
						"title": "收藏",
						"event": "",
					},
					{
						"chatItemId": "-1",
						"title": "删除",
						"event": "",
					},
					{
						"chatItemId": "-1",
						"title": "多选",
						"event": "",
					},
					{
						"chatItemId": "-1",
						"title": "撤回",
						"event": "removeChatItem",
					},
				],
				emoticonList: [],
				//输入模式拓展菜单
				actionList: [
					[{
						name:"相册",
						icon: "/static/image/extends/pic.png",
						event: "uploadImage",
					},
					{
						name:"拍摄",
						icon: "/static/image/extends/video.png",
						event: "",
					},
					{
						name:"收藏",
						icon: "/static/image/extends/shoucan.png",
						event: "",
					},
					{
						name:"名片",
						icon: "/static/image/extends/man.png",
						event: "",
					},
					{
						name:"语音通话",
						icon: "/static/image/extends/phone.png",
						event: "",
					},
					{
						name:"位置",
						icon: "/static/image/extends/path.png",
						event: "",
					}]
				],
				navBarHeight: 0,
				//消息列表
				lists:[{
					chatItemId: "0",
					avatar:"/static/image/iocn_1.jpeg",
					user_id: 2, // 用户ID
					type:"text", //消息内容类型 image, audio,video,file, share
					data:"你好123你好你好你好你好你好你好你好你好你好你好你好你好你好你好你好",
					nickName: "昵称-你好",
					created_time:1613671908,
					isRemove: false,
				},
				{
					chatItemId: "1",
					avatar:"/static/image/iocn_1.jpeg",
					user_id: 1, // 用户ID
					type:"text", //消息内容类型 image, audio,video,file, share
					data:"好你妹321好你妹好你妹好你妹好你妹好你妹好你妹好你妹好你妹好你妹好你妹",
					nickName: "昵称-好你妹",
					created_time:1614271908,
					isRemove: false,
				},
				{
					chatItemId: "2",
					avatar:"/static/image/iocn_1.jpeg",
					user_id: 2, // 用户ID
					type:"text", //消息内容类型 image, audio,video,file, share
					data:"好你妹321好你妹好你妹好你妹好你妹好你妹好你妹好你妹好你妹好你妹好你妹",
					nickName: "昵称-好你妹",
					created_time:1614631908,
					isRemove: false,
				},
				{
					chatItemId: "3",
					avatar:"/static/image/iocn_1.jpeg",
					user_id: 2, // 用户ID
					type:"text", //消息内容类型 image, audio,video,file, share
					data:"好你妹321好你妹好你妹好你妹好你妹好你妹好你妹好你妹好你妹好你妹好你妹",
					nickName: "昵称-好你妹",
					created_time:1614661908,
					isRemove: false,
				},
				{
					chatItemId: "4",
					avatar:"/static/image/iocn_1.jpeg",
					user_id: 1, // 用户ID
					type:"text", //消息内容类型 image, audio,video,file, share
					data:"好你妹321好你妹好你妹好你妹好你妹好你妹好你妹好你妹好你妹好你妹好你妹",
					nickName: "昵称-你好",
					created_time:1614671908,
					isRemove: false,
				},
				{
					chatItemId: "5",
					avatar:"/static/image/iocn_1.jpeg",
					user_id: 1, // 用户ID
					type:"text", //消息内容类型 image, audio,video,file, share
					data:"好你妹321好你妹好你妹好你妹好你妹好你妹好你妹好你妹好你妹好你妹好你妹",
					nickName: "昵称-你好",
					created_time:1614843126,
					isRemove: false,
				},
				{
					chatItemId: "6",
					avatar:"/static/image/iocn_1.jpeg",
					user_id: 1, // 用户ID
					type:"text", //消息内容类型 image, audio,video,file, share
					data:"好你妹321好你妹好你妹好你妹好你妹好你妹好你妹好你妹好你妹好你妹好你妹",
					nickName: "昵称-你好",
					created_time:1615843226,
					isRemove: false,
				},
				{
					chatItemId: "7",
					avatar:"/static/image/iocn_1.jpeg",
					user_id: 2, // 用户ID
					type:"text", //消息内容类型 image, audio,video,file, share
					data:"好你妹321好你妹好你妹好你妹好你妹好你妹好你妹好你妹好你妹好你妹好你妹",
					nickName: "昵称-你好",
					created_time:1615844126,
					isRemove: false,
				},
				]
			}
		},
		computed: {
			// 弹窗菜单
			menuLists() {
				return this.menus.filter(m=>{
					// 是 撤回 && 最新的消息 && 自己的消息
					if (m.title === "撤回") {
						return this.isPopupSelf && this.isNewChatItem
					} else {
						return true
					}
				})
			},
			//聊天区域bottom
			chatBodyBottom() {
				return `top:${this.navBarHeight}px; bottom:${uni.upx2px(110) + this.keyboardHeight}px;`
			},
			
			//拓展蒙版
			maskBottom(){
				return `bottom:${uni.upx2px(110) + this.keyboardHeight}px;`
			},
			emoticonOrActionList() {
				if (this.mode === "action") { return this.actionList }
				if (this.mode === "emoticon") { return this.emoticonList }
			}
		},
		mounted() {
			try {
				const res = uni.getSystemInfoSync()
				this.bottomBarH = res.screenHeight - res.windowHeight
			} catch (e) {}
			
			// #ifdef APP-PLUS-NVUE
			var statusBarHeight = plus.navigator.getStatusbarHeight()
			// #endif
			// upx转rpx
			 this.navBarHeight = statusBarHeight + uni.upx2px(90)
			
			//监听键盘高度变化
			uni.onKeyboardHeightChange(res => {
				this.textKeyboardHeight = res.height
				var h = this.textKeyboardHeight - this.bottomBarH
				if (this.mode === "action" || this.mode === "emoticon") {
					h = uni.upx2px(580)
				}
				
				this.keyboardHeight = Math.max(h, 0)
				
				if (this.lists.length > 0) {
					if (res.height === 0) {
						this.scrollIntoId = ""
					} else {
						this.scrollToBottom()
					}
				}
			})
		},
		watch: {
			mode(newV, oldV) {
				if (newV !== "text" && oldV === "text") {
					uni.hideKeyboard()
				} else if ((newV !== "action" && newV !== "emoticon") && (oldV === "action" || oldV === "emoticon")) {
					this.closeEmoticonOrActions()
				}
				
				// 因为键盘弹起的回调发生在输入框获取到焦点回调之前, 所以这里需要多一次处理
				if (newV === "text") {
					let h = this.textKeyboardHeight - this.bottomBarH
					this.keyboardHeight = Math.max(h, 0)
				} else if (newV === "action" && newV === "emoticon") {
					
				}
			}
		},
		created() {
			this.__init()
		},
		methods: {
			__init() {
				let total = 20
				let page = Math.ceil(total/8)
				var arr = []
				for (var i = 0; i < page; i++) {
					arr[i] = []
					for (var j = 0; j < 8; j++) {
						let curr = i * 8 + j
						if (curr >= 20) {break;}
						let item = {
							name:"表情" + curr,
							icon: "/static/image/emoticon/5497/"+curr+".gif",
							event: "sendEmoticon",
						}
						arr[i].push(item)
					}
				}
				this.emoticonList = arr
			},
			//输入框开始输入
			onInputFocus() {
				if (this.mode !== "text") {
					this.switchInputMode("text")
				}
			},
			onInputBlur() {
				if (this.mode === "text") {
					this.switchInputMode("")
				}
			},
			clickContent() {
				this.switchInputMode("")
			},
			switchInputMode(mode) {
				this.mode = mode
			},
			scrollToTop() {
				this.$nextTick(() => {
					if (this.lists.length > 0) {
						this.scrollIntoId = this.lists[0].chatItemId
					}
				})
			},
			scrollToBottom() {
				this.$nextTick(() => {
					if (this.lists.length > 0) {
						this.scrollIntoId = this.lists[this.lists.length - 1].chatItemId
					}
				})
			},
			scrollIntoIdRemove() {
				this.$nextTick(() => {
					this.scrollIntoId = ""
				})
			},
			isSelf(user_id) {
				//获取本人的id
				let myId = 1
				return user_id === myId	 
			},
			popupShow(x, y) {
				this.$nextTick(() => {
					this.$refs.extend.show(x, y)
				})
			},
			popupHidden() {
				this.$nextTick(() => {
					this.$refs.extend.hide()
				})
			},
			// 长按
			onLongpress({x, y, item}) {
				this.isPopupSelf = this.isSelf(item.user_id)
				this.isNewChatItem = (wxTimeUtil.getDiffNow(item.created_time) < 30)
				
				// 更新弹窗所绑定的消息ID
				this.menuLists.forEach((m, index) => {
					m.chatItemId = item.chatItemId
				})	
				// 展示弹窗
				this.popupShow(x, y)
			},
			// 菜单事件分发
			clickHandle(item) {
				if (item.chatItemId.length === 0 || item.chatItemId < 0) {
					return
				}
				switch (item.event) {
					case "setTop":
						break;
					case "unsetTop":
						break;
					case "removeChatItem":
						this.removeChatItem(item)
						break;
				}
			},
			removeChatItem(item) {
				this.popupHidden()
				/// 查找id匹配的的消息
				let chatItem = this.lists.find(function(v, i, l){
					return v.chatItemId === item.chatItemId
				})
				/// 标记消息为撤回
				if (chatItem != undefined) {
					chatItem.isRemove = true
				}
			},
			// 打开表情包或拓展菜单
			openEmoticonOrActions(mode) {
				if (this.mode === mode) {
					this.switchInputMode("")
				} else {
					this.switchInputMode(mode)
					this.keyboardHeight = uni.upx2px(580)
					this.$refs.actions.show()
				}
			},
			// 关闭表情包或拓展菜单
			closeEmoticonOrActions() {
				this.keyboardHeight = 0
				this.$refs.actions.hide()
			},
			// 键盘更多时间分发
			actionEvent(item) {
				if (item.event.length === 0) {
					return
				}
				switch (item.event) {
					case "uploadImage":
						break;
				}
			},
			sendMessage(type) {
				let curTimestamp = parseInt(new Date().getTime()/1000); //当前时间戳
				
				var chatItemId = "0"
				if (this.lists.length > 0) {
					chatItemId = (parseInt(this.lists[this.lists.length - 1].chatItemId) + 1).toString()
				}
				let msgItem = {
					chatItemId: chatItemId,
					avatar:"/static/image/iocn_1.jpeg",
					user_id: 1, // 用户ID
					type:type, //消息内容类型 image, audio,video,file, share
					data:"",
					nickName: "我的昵称",
					created_time:curTimestamp,
					isRemove: false,
				}
				
				switch(type) {
					case 'text':
					msgItem.data = this.text
					this.text = ""
					break;
				}
				
				this.lists.push(msgItem)
				this.scrollToBottom()
			}
		},
	}
</script>

<style>

</style>
